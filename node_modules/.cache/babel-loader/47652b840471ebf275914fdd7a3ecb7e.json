{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Shobhit Singh\\\\OneDrive\\\\Desktop\\\\quiz-app-master\\\\src\\\\components\\\\App\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Layout from '../Layout';\nimport Loader from '../Loader';\nimport Main from '../Main';\nimport Quiz from '../Quiz';\nimport Result from '../Result';\nimport { shuffle } from '../../utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [loading, setLoading] = useState(false);\n  const [data, setData] = useState(null);\n  const [countdownTime, setCountdownTime] = useState(null);\n  const [isQuizStarted, setIsQuizStarted] = useState(false);\n  const [isQuizCompleted, setIsQuizCompleted] = useState(false);\n  const [resultData, setResultData] = useState(null);\n\n  const startQuiz = (data, countdownTime) => {\n    setLoading(true);\n    setCountdownTime(countdownTime);\n    setTimeout(() => {\n      setData(data);\n      setIsQuizStarted(true);\n      setLoading(false);\n    }, 1000);\n  };\n\n  const endQuiz = resultData => {\n    setLoading(true);\n    setTimeout(() => {\n      setIsQuizStarted(false);\n      setIsQuizCompleted(true);\n      setResultData(resultData);\n      setLoading(false);\n    }, 2000);\n  };\n\n  const replayQuiz = () => {\n    setLoading(true);\n    const shuffledData = shuffle(data);\n    shuffledData.forEach(element => {\n      element.options = shuffle(element.options);\n    });\n    setData(shuffledData);\n    setTimeout(() => {\n      setIsQuizStarted(true);\n      setIsQuizCompleted(false);\n      setResultData(null);\n      setLoading(false);\n    }, 1000);\n  };\n\n  const resetQuiz = () => {\n    setLoading(true);\n    setTimeout(() => {\n      setData(null);\n      setCountdownTime(null);\n      setIsQuizStarted(false);\n      setIsQuizCompleted(false);\n      setResultData(null);\n      setLoading(false);\n    }, 1000);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: [loading && /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 19\n    }, this), !loading && !isQuizStarted && !isQuizCompleted && /*#__PURE__*/_jsxDEV(Main, {\n      startQuiz: startQuiz\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this), !loading && isQuizStarted && /*#__PURE__*/_jsxDEV(Quiz, {\n      data: data,\n      countdownTime: countdownTime,\n      endQuiz: endQuiz\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this), !loading && isQuizCompleted && /*#__PURE__*/_jsxDEV(Result, { ...resultData,\n      replayQuiz: replayQuiz,\n      resetQuiz: resetQuiz\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"c+Asy05yS16VuYoxWfNz/ItDOoc=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Shobhit Singh/OneDrive/Desktop/quiz-app-master/src/components/App/index.js"],"names":["React","useState","Layout","Loader","Main","Quiz","Result","shuffle","App","loading","setLoading","data","setData","countdownTime","setCountdownTime","isQuizStarted","setIsQuizStarted","isQuizCompleted","setIsQuizCompleted","resultData","setResultData","startQuiz","setTimeout","endQuiz","replayQuiz","shuffledData","forEach","element","options","resetQuiz"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\n\nimport Layout from '../Layout';\nimport Loader from '../Loader';\nimport Main from '../Main';\nimport Quiz from '../Quiz';\nimport Result from '../Result';\n\nimport { shuffle } from '../../utils';\n\nconst App = () => {\n  const [loading, setLoading] = useState(false);\n  const [data, setData] = useState(null);\n  const [countdownTime, setCountdownTime] = useState(null);\n  const [isQuizStarted, setIsQuizStarted] = useState(false);\n  const [isQuizCompleted, setIsQuizCompleted] = useState(false);\n  const [resultData, setResultData] = useState(null);\n\n  const startQuiz = (data, countdownTime) => {\n    setLoading(true);\n    setCountdownTime(countdownTime);\n\n    setTimeout(() => {\n      setData(data);\n      setIsQuizStarted(true);\n      setLoading(false);\n    }, 1000);\n  };\n\n  const endQuiz = resultData => {\n    setLoading(true);\n\n    setTimeout(() => {\n      setIsQuizStarted(false);\n      setIsQuizCompleted(true);\n      setResultData(resultData);\n      setLoading(false);\n    }, 2000);\n  };\n\n  const replayQuiz = () => {\n    setLoading(true);\n\n    const shuffledData = shuffle(data);\n    shuffledData.forEach(element => {\n      element.options = shuffle(element.options);\n    });\n\n    setData(shuffledData);\n\n    setTimeout(() => {\n      setIsQuizStarted(true);\n      setIsQuizCompleted(false);\n      setResultData(null);\n      setLoading(false);\n    }, 1000);\n  };\n\n  const resetQuiz = () => {\n    setLoading(true);\n\n    setTimeout(() => {\n      setData(null);\n      setCountdownTime(null);\n      setIsQuizStarted(false);\n      setIsQuizCompleted(false);\n      setResultData(null);\n      setLoading(false);\n    }, 1000);\n  };\n\n  return (\n    <Layout>\n      {loading && <Loader />}\n      {!loading && !isQuizStarted && !isQuizCompleted && (\n        <Main startQuiz={startQuiz} />\n      )}\n      {!loading && isQuizStarted && (\n        <Quiz data={data} countdownTime={countdownTime} endQuiz={endQuiz} />\n      )}\n      {!loading && isQuizCompleted && (\n        <Result {...resultData} replayQuiz={replayQuiz} resetQuiz={resetQuiz} />\n      )}\n    </Layout>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}