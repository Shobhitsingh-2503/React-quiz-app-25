{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Shobhit Singh\\\\OneDrive\\\\Desktop\\\\quiz app\\\\src\\\\components\\\\Countdown\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Popup } from 'semantic-ui-react';\nimport Swal from 'sweetalert2';\nimport { timeConverter } from '../../utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Countdown = ({\n  countdownTime,\n  timeOver,\n  setTimeTaken\n}) => {\n  _s();\n\n  const totalTime = countdownTime * 1000;\n  const [timerTime, setTimerTime] = useState(totalTime);\n  const {\n    hours,\n    minutes,\n    seconds\n  } = timeConverter(timerTime);\n  useEffect(() => {\n    const timer = setInterval(() => {\n      const newTime = timerTime - 1000;\n\n      if (newTime >= 0) {\n        setTimerTime(newTime);\n      } else {\n        clearInterval(timer);\n        Swal.fire({\n          title: `Your Time's Up`,\n          icon: 'info',\n          timer: 5000,\n          willClose: () => timeOver(totalTime - timerTime)\n        });\n      }\n    }, 1000);\n    return () => {\n      clearInterval(timer);\n      setTimeTaken(totalTime - timerTime + 1000);\n    }; // eslint-disable-next-line\n  }, [timerTime]);\n  return /*#__PURE__*/_jsxDEV(Button.Group, {\n    size: \"massive\",\n    basic: true,\n    floated: \"right\",\n    children: [/*#__PURE__*/_jsxDEV(Popup, {\n      content: \"Hours\",\n      trigger: /*#__PURE__*/_jsxDEV(Button, {\n        active: true,\n        children: hours\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 18\n      }, this),\n      position: \"bottom left\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Popup, {\n      content: \"Minutes\",\n      trigger: /*#__PURE__*/_jsxDEV(Button, {\n        active: true,\n        children: minutes\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 18\n      }, this),\n      position: \"bottom left\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Popup, {\n      content: \"Seconds\",\n      trigger: /*#__PURE__*/_jsxDEV(Button, {\n        active: true,\n        children: seconds\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 18\n      }, this),\n      position: \"bottom left\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Countdown, \"V3gSRhO1pJBevGSKDod+l4Euank=\");\n\n_c = Countdown;\nCountdown.propTypes = {\n  countdownTime: PropTypes.number.isRequired,\n  timeOver: PropTypes.func.isRequired,\n  setTimeTaken: PropTypes.func.isRequired\n};\nexport default Countdown;\n\nvar _c;\n\n$RefreshReg$(_c, \"Countdown\");","map":{"version":3,"sources":["C:/Users/Shobhit Singh/OneDrive/Desktop/quiz app/src/components/Countdown/index.js"],"names":["React","useState","useEffect","PropTypes","Button","Popup","Swal","timeConverter","Countdown","countdownTime","timeOver","setTimeTaken","totalTime","timerTime","setTimerTime","hours","minutes","seconds","timer","setInterval","newTime","clearInterval","fire","title","icon","willClose","propTypes","number","isRequired","func"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,MAAT,EAAiBC,KAAjB,QAA8B,mBAA9B;AACA,OAAOC,IAAP,MAAiB,aAAjB;AAEA,SAASC,aAAT,QAA8B,aAA9B;;;AAEA,MAAMC,SAAS,GAAG,CAAC;AAAEC,EAAAA,aAAF;AAAiBC,EAAAA,QAAjB;AAA2BC,EAAAA;AAA3B,CAAD,KAA+C;AAAA;;AAC/D,QAAMC,SAAS,GAAGH,aAAa,GAAG,IAAlC;AACA,QAAM,CAACI,SAAD,EAAYC,YAAZ,IAA4Bb,QAAQ,CAACW,SAAD,CAA1C;AACA,QAAM;AAAEG,IAAAA,KAAF;AAASC,IAAAA,OAAT;AAAkBC,IAAAA;AAAlB,MAA8BV,aAAa,CAACM,SAAD,CAAjD;AAEAX,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMgB,KAAK,GAAGC,WAAW,CAAC,MAAM;AAC9B,YAAMC,OAAO,GAAGP,SAAS,GAAG,IAA5B;;AAEA,UAAIO,OAAO,IAAI,CAAf,EAAkB;AAChBN,QAAAA,YAAY,CAACM,OAAD,CAAZ;AACD,OAFD,MAEO;AACLC,QAAAA,aAAa,CAACH,KAAD,CAAb;AAEAZ,QAAAA,IAAI,CAACgB,IAAL,CAAU;AACRC,UAAAA,KAAK,EAAG,gBADA;AAERC,UAAAA,IAAI,EAAE,MAFE;AAGRN,UAAAA,KAAK,EAAE,IAHC;AAIRO,UAAAA,SAAS,EAAE,MAAMf,QAAQ,CAACE,SAAS,GAAGC,SAAb;AAJjB,SAAV;AAMD;AACF,KAfwB,EAetB,IAfsB,CAAzB;AAiBA,WAAO,MAAM;AACXQ,MAAAA,aAAa,CAACH,KAAD,CAAb;AACAP,MAAAA,YAAY,CAACC,SAAS,GAAGC,SAAZ,GAAwB,IAAzB,CAAZ;AACD,KAHD,CAlBc,CAuBd;AACD,GAxBQ,EAwBN,CAACA,SAAD,CAxBM,CAAT;AA0BA,sBACE,QAAC,MAAD,CAAQ,KAAR;AAAc,IAAA,IAAI,EAAC,SAAnB;AAA6B,IAAA,KAAK,MAAlC;AAAmC,IAAA,OAAO,EAAC,OAA3C;AAAA,4BACE,QAAC,KAAD;AACE,MAAA,OAAO,EAAC,OADV;AAEE,MAAA,OAAO,eAAE,QAAC,MAAD;AAAQ,QAAA,MAAM,MAAd;AAAA,kBAAgBE;AAAhB;AAAA;AAAA;AAAA;AAAA,cAFX;AAGE,MAAA,QAAQ,EAAC;AAHX;AAAA;AAAA;AAAA;AAAA,YADF,eAME,QAAC,KAAD;AACE,MAAA,OAAO,EAAC,SADV;AAEE,MAAA,OAAO,eAAE,QAAC,MAAD;AAAQ,QAAA,MAAM,MAAd;AAAA,kBAAgBC;AAAhB;AAAA;AAAA;AAAA;AAAA,cAFX;AAGE,MAAA,QAAQ,EAAC;AAHX;AAAA;AAAA;AAAA;AAAA,YANF,eAWE,QAAC,KAAD;AACE,MAAA,OAAO,EAAC,SADV;AAEE,MAAA,OAAO,eAAE,QAAC,MAAD;AAAQ,QAAA,MAAM,MAAd;AAAA,kBAAgBC;AAAhB;AAAA;AAAA;AAAA;AAAA,cAFX;AAGE,MAAA,QAAQ,EAAC;AAHX;AAAA;AAAA;AAAA;AAAA,YAXF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD,CAlDD;;GAAMT,S;;KAAAA,S;AAoDNA,SAAS,CAACkB,SAAV,GAAsB;AACpBjB,EAAAA,aAAa,EAAEN,SAAS,CAACwB,MAAV,CAAiBC,UADZ;AAEpBlB,EAAAA,QAAQ,EAAEP,SAAS,CAAC0B,IAAV,CAAeD,UAFL;AAGpBjB,EAAAA,YAAY,EAAER,SAAS,CAAC0B,IAAV,CAAeD;AAHT,CAAtB;AAMA,eAAepB,SAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Popup } from 'semantic-ui-react';\nimport Swal from 'sweetalert2';\n\nimport { timeConverter } from '../../utils';\n\nconst Countdown = ({ countdownTime, timeOver, setTimeTaken }) => {\n  const totalTime = countdownTime * 1000;\n  const [timerTime, setTimerTime] = useState(totalTime);\n  const { hours, minutes, seconds } = timeConverter(timerTime);\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      const newTime = timerTime - 1000;\n\n      if (newTime >= 0) {\n        setTimerTime(newTime);\n      } else {\n        clearInterval(timer);\n\n        Swal.fire({\n          title: `Your Time's Up`,\n          icon: 'info',\n          timer: 5000,\n          willClose: () => timeOver(totalTime - timerTime)\n        });\n      }\n    }, 1000);\n\n    return () => {\n      clearInterval(timer);\n      setTimeTaken(totalTime - timerTime + 1000);\n    };\n\n    // eslint-disable-next-line\n  }, [timerTime]);\n\n  return (\n    <Button.Group size=\"massive\" basic floated=\"right\">\n      <Popup\n        content=\"Hours\"\n        trigger={<Button active>{hours}</Button>}\n        position=\"bottom left\"\n      />\n      <Popup\n        content=\"Minutes\"\n        trigger={<Button active>{minutes}</Button>}\n        position=\"bottom left\"\n      />\n      <Popup\n        content=\"Seconds\"\n        trigger={<Button active>{seconds}</Button>}\n        position=\"bottom left\"\n      />\n    </Button.Group>\n  );\n};\n\nCountdown.propTypes = {\n  countdownTime: PropTypes.number.isRequired,\n  timeOver: PropTypes.func.isRequired,\n  setTimeTaken: PropTypes.func.isRequired\n};\n\nexport default Countdown;\n"]},"metadata":{},"sourceType":"module"}