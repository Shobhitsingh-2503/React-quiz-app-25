{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Shobhit Singh\\\\OneDrive\\\\Desktop\\\\quiz app\\\\src\\\\components\\\\Main\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Container, Segment, Item, Dropdown, Divider, Button, Message } from 'semantic-ui-react';\nimport mindImg from \"../../images/mind.svg\";\nimport { CATEGORIES, NUM_OF_QUESTIONS, DIFFICULTY, QUESTIONS_TYPE, COUNTDOWN_TIME } from '../../constants';\nimport { shuffle } from '../../utils';\nimport Offline from '../Offline';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Main = ({\n  startQuiz\n}) => {\n  _s();\n\n  const [category, setCategory] = useState('0');\n  const [numOfQuestions, setNumOfQuestions] = useState(5);\n  const [difficulty, setDifficulty] = useState('0');\n  const [questionsType, setQuestionsType] = useState('0');\n  const [countdownTime, setCountdownTime] = useState({\n    hours: 0,\n    minutes: 120,\n    seconds: 0\n  });\n  const [processing, setProcessing] = useState(false);\n  const [error, setError] = useState(null);\n  const [offline, setOffline] = useState(false);\n\n  const handleTimeChange = (e, {\n    name,\n    value\n  }) => {\n    setCountdownTime({ ...countdownTime,\n      [name]: value\n    });\n  };\n\n  let allFieldsSelected = false;\n\n  if (category && numOfQuestions && difficulty && questionsType && (countdownTime.hours || countdownTime.minutes || countdownTime.seconds)) {\n    allFieldsSelected = true;\n  }\n\n  const fetchData = () => {\n    setProcessing(true);\n    if (error) setError(null);\n    const API = `https://opentdb.com/api.php?amount=${numOfQuestions}&category=${category}&difficulty=${difficulty}&type=${questionsType}`;\n    fetch(API).then(respone => respone.json()).then(data => setTimeout(() => {\n      const {\n        response_code,\n        results\n      } = data;\n\n      if (response_code === 1) {\n        const message = /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"The API doesn't have enough questions for your query. (Ex. Asking for 50 Questions in a Category that only has 20.)\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 17\n          }, this), \"Please change the \", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"No. of Questions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 35\n          }, this), \",\", ' ', /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Difficulty Level\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 17\n          }, this), \", or\", ' ', /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Type of Questions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 17\n          }, this), \".\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 15\n        }, this);\n\n        setProcessing(false);\n        setError({\n          message\n        });\n        return;\n      }\n\n      results.forEach(element => {\n        element.options = shuffle([element.correct_answer, ...element.incorrect_answers]);\n      });\n      setProcessing(false);\n      startQuiz(results, countdownTime.hours + countdownTime.minutes + countdownTime.seconds);\n    }, 1000)).catch(error => setTimeout(() => {\n      if (!navigator.onLine) {\n        setOffline(true);\n      } else {\n        setProcessing(false);\n        setError(error);\n      }\n    }, 1000));\n  };\n\n  if (offline) return /*#__PURE__*/_jsxDEV(Offline, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Segment, {\n      children: /*#__PURE__*/_jsxDEV(Item.Group, {\n        divided: true,\n        children: /*#__PURE__*/_jsxDEV(Item, {\n          children: [/*#__PURE__*/_jsxDEV(Item.Image, {\n            src: mindImg\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Item.Content, {\n            children: [/*#__PURE__*/_jsxDEV(Item.Header, {\n              children: /*#__PURE__*/_jsxDEV(\"h1\", {\n                children: \"The Ultimate Trivia Quiz\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 123,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 15\n            }, this), error && /*#__PURE__*/_jsxDEV(Message, {\n              error: true,\n              onDismiss: () => setError(null),\n              children: [/*#__PURE__*/_jsxDEV(Message.Header, {\n                children: \"Error!\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 127,\n                columnNumber: 19\n              }, this), error.message]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Item.Meta, {\n              children: [/*#__PURE__*/_jsxDEV(Dropdown, {\n                fluid: true,\n                selection: true,\n                name: \"category\",\n                placeholder: \"Select Quiz Category\",\n                header: \"Select Quiz Category\",\n                options: CATEGORIES,\n                value: category,\n                onChange: (e, {\n                  value\n                }) => setCategory(value),\n                disabled: processing\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 133,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 144,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n                fluid: true,\n                selection: true,\n                name: \"numOfQ\",\n                placeholder: \"Select No. of Questions\",\n                header: \"Select No. of Questions\",\n                options: NUM_OF_QUESTIONS,\n                value: numOfQuestions,\n                onChange: (e, {\n                  value\n                }) => setNumOfQuestions(value),\n                disabled: processing\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 145,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 156,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n                fluid: true,\n                selection: true,\n                name: \"difficulty\",\n                placeholder: \"Select Difficulty Level\",\n                header: \"Select Difficulty Level\",\n                options: DIFFICULTY,\n                value: difficulty,\n                onChange: (e, {\n                  value\n                }) => setDifficulty(value),\n                disabled: processing\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 157,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 168,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n                fluid: true,\n                selection: true,\n                name: \"type\",\n                placeholder: \"Select Questions Type\",\n                header: \"Select Questions Type\",\n                options: QUESTIONS_TYPE,\n                value: questionsType,\n                onChange: (e, {\n                  value\n                }) => setQuestionsType(value),\n                disabled: processing\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 169,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 180,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n                search: true,\n                selection: true,\n                name: \"hours\",\n                placeholder: \"Select Hours\",\n                header: \"Select Hours\",\n                options: COUNTDOWN_TIME.hours,\n                value: countdownTime.hours,\n                onChange: handleTimeChange,\n                disabled: processing\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 181,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n                search: true,\n                selection: true,\n                name: \"minutes\",\n                placeholder: \"Select Minutes\",\n                header: \"Select Minutes\",\n                options: COUNTDOWN_TIME.minutes,\n                value: countdownTime.minutes,\n                onChange: handleTimeChange,\n                disabled: processing\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 192,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n                search: true,\n                selection: true,\n                name: \"seconds\",\n                placeholder: \"Select Seconds\",\n                header: \"Select Seconds\",\n                options: COUNTDOWN_TIME.seconds,\n                value: countdownTime.seconds,\n                onChange: handleTimeChange,\n                disabled: processing\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 203,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 215,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Item.Extra, {\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                primary: true,\n                size: \"big\",\n                icon: \"play\",\n                labelPosition: \"left\",\n                content: processing ? 'Processing...' : 'Play Now',\n                onClick: fetchData,\n                disabled: !allFieldsSelected || processing\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 217,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Main, \"Pgkmx09kjkuFDGMN3ezig805d2M=\");\n\n_c = Main;\nMain.propTypes = {\n  startQuiz: PropTypes.func.isRequired\n};\nexport default Main;\n\nvar _c;\n\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"sources":["C:/Users/Shobhit Singh/OneDrive/Desktop/quiz app/src/components/Main/index.js"],"names":["React","useState","PropTypes","Container","Segment","Item","Dropdown","Divider","Button","Message","CATEGORIES","NUM_OF_QUESTIONS","DIFFICULTY","QUESTIONS_TYPE","COUNTDOWN_TIME","shuffle","Offline","Main","startQuiz","category","setCategory","numOfQuestions","setNumOfQuestions","difficulty","setDifficulty","questionsType","setQuestionsType","countdownTime","setCountdownTime","hours","minutes","seconds","processing","setProcessing","error","setError","offline","setOffline","handleTimeChange","e","name","value","allFieldsSelected","fetchData","API","fetch","then","respone","json","data","setTimeout","response_code","results","message","forEach","element","options","correct_answer","incorrect_answers","catch","navigator","onLine","mindImg","propTypes","func","isRequired"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SACEC,SADF,EAEEC,OAFF,EAGEC,IAHF,EAIEC,QAJF,EAKEC,OALF,EAMEC,MANF,EAOEC,OAPF,QAQO,mBARP;;AAYA,SACEC,UADF,EAEEC,gBAFF,EAGEC,UAHF,EAIEC,cAJF,EAKEC,cALF,QAMO,iBANP;AAOA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAOC,OAAP,MAAoB,YAApB;;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAmB;AAAA;;AAC9B,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BnB,QAAQ,CAAC,GAAD,CAAxC;AACA,QAAM,CAACoB,cAAD,EAAiBC,iBAAjB,IAAsCrB,QAAQ,CAAC,CAAD,CAApD;AACA,QAAM,CAACsB,UAAD,EAAaC,aAAb,IAA8BvB,QAAQ,CAAC,GAAD,CAA5C;AACA,QAAM,CAACwB,aAAD,EAAgBC,gBAAhB,IAAoCzB,QAAQ,CAAC,GAAD,CAAlD;AACA,QAAM,CAAC0B,aAAD,EAAgBC,gBAAhB,IAAoC3B,QAAQ,CAAC;AACjD4B,IAAAA,KAAK,EAAE,CAD0C;AAEjDC,IAAAA,OAAO,EAAE,GAFwC;AAGjDC,IAAAA,OAAO,EAAE;AAHwC,GAAD,CAAlD;AAKA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BhC,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM,CAACiC,KAAD,EAAQC,QAAR,IAAoBlC,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACmC,OAAD,EAAUC,UAAV,IAAwBpC,QAAQ,CAAC,KAAD,CAAtC;;AAEA,QAAMqC,gBAAgB,GAAG,CAACC,CAAD,EAAI;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAJ,KAAwB;AAC/Cb,IAAAA,gBAAgB,CAAC,EAAE,GAAGD,aAAL;AAAoB,OAACa,IAAD,GAAQC;AAA5B,KAAD,CAAhB;AACD,GAFD;;AAIA,MAAIC,iBAAiB,GAAG,KAAxB;;AACA,MACEvB,QAAQ,IACRE,cADA,IAEAE,UAFA,IAGAE,aAHA,KAICE,aAAa,CAACE,KAAd,IAAuBF,aAAa,CAACG,OAArC,IAAgDH,aAAa,CAACI,OAJ/D,CADF,EAME;AACAW,IAAAA,iBAAiB,GAAG,IAApB;AACD;;AAED,QAAMC,SAAS,GAAG,MAAM;AACtBV,IAAAA,aAAa,CAAC,IAAD,CAAb;AAEA,QAAIC,KAAJ,EAAWC,QAAQ,CAAC,IAAD,CAAR;AAEX,UAAMS,GAAG,GAAI,sCAAqCvB,cAAe,aAAYF,QAAS,eAAcI,UAAW,SAAQE,aAAc,EAArI;AAEAoB,IAAAA,KAAK,CAACD,GAAD,CAAL,CACGE,IADH,CACQC,OAAO,IAAIA,OAAO,CAACC,IAAR,EADnB,EAEGF,IAFH,CAEQG,IAAI,IACRC,UAAU,CAAC,MAAM;AACf,YAAM;AAAEC,QAAAA,aAAF;AAAiBC,QAAAA;AAAjB,UAA6BH,IAAnC;;AAEA,UAAIE,aAAa,KAAK,CAAtB,EAAyB;AACvB,cAAME,OAAO,gBACX;AAAA,yJAGE;AAAA;AAAA;AAAA;AAAA,kBAHF,eAIE;AAAA;AAAA;AAAA;AAAA,kBAJF,qCAKoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBALpB,OAKuD,GALvD,eAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBANF,UAMwC,GANxC,eAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAPF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF;;AAYApB,QAAAA,aAAa,CAAC,KAAD,CAAb;AACAE,QAAAA,QAAQ,CAAC;AAAEkB,UAAAA;AAAF,SAAD,CAAR;AAEA;AACD;;AAEDD,MAAAA,OAAO,CAACE,OAAR,CAAgBC,OAAO,IAAI;AACzBA,QAAAA,OAAO,CAACC,OAAR,GAAkBzC,OAAO,CAAC,CACxBwC,OAAO,CAACE,cADgB,EAExB,GAAGF,OAAO,CAACG,iBAFa,CAAD,CAAzB;AAID,OALD;AAOAzB,MAAAA,aAAa,CAAC,KAAD,CAAb;AACAf,MAAAA,SAAS,CACPkC,OADO,EAEPzB,aAAa,CAACE,KAAd,GAAsBF,aAAa,CAACG,OAApC,GAA8CH,aAAa,CAACI,OAFrD,CAAT;AAID,KAlCS,EAkCP,IAlCO,CAHd,EAuCG4B,KAvCH,CAuCSzB,KAAK,IACVgB,UAAU,CAAC,MAAM;AACf,UAAI,CAACU,SAAS,CAACC,MAAf,EAAuB;AACrBxB,QAAAA,UAAU,CAAC,IAAD,CAAV;AACD,OAFD,MAEO;AACLJ,QAAAA,aAAa,CAAC,KAAD,CAAb;AACAE,QAAAA,QAAQ,CAACD,KAAD,CAAR;AACD;AACF,KAPS,EAOP,IAPO,CAxCd;AAiDD,GAxDD;;AA0DA,MAAIE,OAAJ,EAAa,oBAAO,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,UAAP;AAEb,sBACE,QAAC,SAAD;AAAA,4BACE,QAAC,OAAD;AAAA,6BACE,QAAC,IAAD,CAAM,KAAN;AAAY,QAAA,OAAO,MAAnB;AAAA,+BACE,QAAC,IAAD;AAAA,kCACE,QAAC,IAAD,CAAM,KAAN;AAAY,YAAA,GAAG,EAAE0B;AAAjB;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,IAAD,CAAM,OAAN;AAAA,oCACE,QAAC,IAAD,CAAM,MAAN;AAAA,qCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,oBADF,EAIG5B,KAAK,iBACJ,QAAC,OAAD;AAAS,cAAA,KAAK,MAAd;AAAe,cAAA,SAAS,EAAE,MAAMC,QAAQ,CAAC,IAAD,CAAxC;AAAA,sCACE,QAAC,OAAD,CAAS,MAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,EAEGD,KAAK,CAACmB,OAFT;AAAA;AAAA;AAAA;AAAA;AAAA,oBALJ,eAUE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,oBAVF,eAWE,QAAC,IAAD,CAAM,IAAN;AAAA,sCACE,QAAC,QAAD;AACE,gBAAA,KAAK,MADP;AAEE,gBAAA,SAAS,MAFX;AAGE,gBAAA,IAAI,EAAC,UAHP;AAIE,gBAAA,WAAW,EAAC,sBAJd;AAKE,gBAAA,MAAM,EAAC,sBALT;AAME,gBAAA,OAAO,EAAE3C,UANX;AAOE,gBAAA,KAAK,EAAES,QAPT;AAQE,gBAAA,QAAQ,EAAE,CAACoB,CAAD,EAAI;AAAEE,kBAAAA;AAAF,iBAAJ,KAAkBrB,WAAW,CAACqB,KAAD,CARzC;AASE,gBAAA,QAAQ,EAAET;AATZ;AAAA;AAAA;AAAA;AAAA,sBADF,eAYE;AAAA;AAAA;AAAA;AAAA,sBAZF,eAaE,QAAC,QAAD;AACE,gBAAA,KAAK,MADP;AAEE,gBAAA,SAAS,MAFX;AAGE,gBAAA,IAAI,EAAC,QAHP;AAIE,gBAAA,WAAW,EAAC,yBAJd;AAKE,gBAAA,MAAM,EAAC,yBALT;AAME,gBAAA,OAAO,EAAErB,gBANX;AAOE,gBAAA,KAAK,EAAEU,cAPT;AAQE,gBAAA,QAAQ,EAAE,CAACkB,CAAD,EAAI;AAAEE,kBAAAA;AAAF,iBAAJ,KAAkBnB,iBAAiB,CAACmB,KAAD,CAR/C;AASE,gBAAA,QAAQ,EAAET;AATZ;AAAA;AAAA;AAAA;AAAA,sBAbF,eAwBE;AAAA;AAAA;AAAA;AAAA,sBAxBF,eAyBE,QAAC,QAAD;AACE,gBAAA,KAAK,MADP;AAEE,gBAAA,SAAS,MAFX;AAGE,gBAAA,IAAI,EAAC,YAHP;AAIE,gBAAA,WAAW,EAAC,yBAJd;AAKE,gBAAA,MAAM,EAAC,yBALT;AAME,gBAAA,OAAO,EAAEpB,UANX;AAOE,gBAAA,KAAK,EAAEW,UAPT;AAQE,gBAAA,QAAQ,EAAE,CAACgB,CAAD,EAAI;AAAEE,kBAAAA;AAAF,iBAAJ,KAAkBjB,aAAa,CAACiB,KAAD,CAR3C;AASE,gBAAA,QAAQ,EAAET;AATZ;AAAA;AAAA;AAAA;AAAA,sBAzBF,eAoCE;AAAA;AAAA;AAAA;AAAA,sBApCF,eAqCE,QAAC,QAAD;AACE,gBAAA,KAAK,MADP;AAEE,gBAAA,SAAS,MAFX;AAGE,gBAAA,IAAI,EAAC,MAHP;AAIE,gBAAA,WAAW,EAAC,uBAJd;AAKE,gBAAA,MAAM,EAAC,uBALT;AAME,gBAAA,OAAO,EAAEnB,cANX;AAOE,gBAAA,KAAK,EAAEY,aAPT;AAQE,gBAAA,QAAQ,EAAE,CAACc,CAAD,EAAI;AAAEE,kBAAAA;AAAF,iBAAJ,KAAkBf,gBAAgB,CAACe,KAAD,CAR9C;AASE,gBAAA,QAAQ,EAAET;AATZ;AAAA;AAAA;AAAA;AAAA,sBArCF,eAgDE;AAAA;AAAA;AAAA;AAAA,sBAhDF,eAiDE,QAAC,QAAD;AACE,gBAAA,MAAM,MADR;AAEE,gBAAA,SAAS,MAFX;AAGE,gBAAA,IAAI,EAAC,OAHP;AAIE,gBAAA,WAAW,EAAC,cAJd;AAKE,gBAAA,MAAM,EAAC,cALT;AAME,gBAAA,OAAO,EAAElB,cAAc,CAACe,KAN1B;AAOE,gBAAA,KAAK,EAAEF,aAAa,CAACE,KAPvB;AAQE,gBAAA,QAAQ,EAAES,gBARZ;AASE,gBAAA,QAAQ,EAAEN;AATZ;AAAA;AAAA;AAAA;AAAA,sBAjDF,eA4DE,QAAC,QAAD;AACE,gBAAA,MAAM,MADR;AAEE,gBAAA,SAAS,MAFX;AAGE,gBAAA,IAAI,EAAC,SAHP;AAIE,gBAAA,WAAW,EAAC,gBAJd;AAKE,gBAAA,MAAM,EAAC,gBALT;AAME,gBAAA,OAAO,EAAElB,cAAc,CAACgB,OAN1B;AAOE,gBAAA,KAAK,EAAEH,aAAa,CAACG,OAPvB;AAQE,gBAAA,QAAQ,EAAEQ,gBARZ;AASE,gBAAA,QAAQ,EAAEN;AATZ;AAAA;AAAA;AAAA;AAAA,sBA5DF,eAuEE,QAAC,QAAD;AACE,gBAAA,MAAM,MADR;AAEE,gBAAA,SAAS,MAFX;AAGE,gBAAA,IAAI,EAAC,SAHP;AAIE,gBAAA,WAAW,EAAC,gBAJd;AAKE,gBAAA,MAAM,EAAC,gBALT;AAME,gBAAA,OAAO,EAAElB,cAAc,CAACiB,OAN1B;AAOE,gBAAA,KAAK,EAAEJ,aAAa,CAACI,OAPvB;AAQE,gBAAA,QAAQ,EAAEO,gBARZ;AASE,gBAAA,QAAQ,EAAEN;AATZ;AAAA;AAAA;AAAA;AAAA,sBAvEF;AAAA;AAAA;AAAA;AAAA;AAAA,oBAXF,eA8FE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,oBA9FF,eA+FE,QAAC,IAAD,CAAM,KAAN;AAAA,qCACE,QAAC,MAAD;AACE,gBAAA,OAAO,MADT;AAEE,gBAAA,IAAI,EAAC,KAFP;AAGE,gBAAA,IAAI,EAAC,MAHP;AAIE,gBAAA,aAAa,EAAC,MAJhB;AAKE,gBAAA,OAAO,EAAEA,UAAU,GAAG,eAAH,GAAqB,UAL1C;AAME,gBAAA,OAAO,EAAEW,SANX;AAOE,gBAAA,QAAQ,EAAE,CAACD,iBAAD,IAAsBV;AAPlC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,oBA/FF;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAmHE;AAAA;AAAA;AAAA;AAAA,YAnHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAuHD,CAhND;;GAAMf,I;;KAAAA,I;AAkNNA,IAAI,CAAC8C,SAAL,GAAiB;AACf7C,EAAAA,SAAS,EAAEhB,SAAS,CAAC8D,IAAV,CAAeC;AADX,CAAjB;AAIA,eAAehD,IAAf","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Container,\n  Segment,\n  Item,\n  Dropdown,\n  Divider,\n  Button,\n  Message,\n} from 'semantic-ui-react';\n\nimport mindImg from '../../images/mind.svg';\n\nimport {\n  CATEGORIES,\n  NUM_OF_QUESTIONS,\n  DIFFICULTY,\n  QUESTIONS_TYPE,\n  COUNTDOWN_TIME,\n} from '../../constants';\nimport { shuffle } from '../../utils';\n\nimport Offline from '../Offline';\n\nconst Main = ({ startQuiz }) => {\n  const [category, setCategory] = useState('0');\n  const [numOfQuestions, setNumOfQuestions] = useState(5);\n  const [difficulty, setDifficulty] = useState('0');\n  const [questionsType, setQuestionsType] = useState('0');\n  const [countdownTime, setCountdownTime] = useState({\n    hours: 0,\n    minutes: 120,\n    seconds: 0,\n  });\n  const [processing, setProcessing] = useState(false);\n  const [error, setError] = useState(null);\n  const [offline, setOffline] = useState(false);\n\n  const handleTimeChange = (e, { name, value }) => {\n    setCountdownTime({ ...countdownTime, [name]: value });\n  };\n\n  let allFieldsSelected = false;\n  if (\n    category &&\n    numOfQuestions &&\n    difficulty &&\n    questionsType &&\n    (countdownTime.hours || countdownTime.minutes || countdownTime.seconds)\n  ) {\n    allFieldsSelected = true;\n  }\n\n  const fetchData = () => {\n    setProcessing(true);\n\n    if (error) setError(null);\n\n    const API = `https://opentdb.com/api.php?amount=${numOfQuestions}&category=${category}&difficulty=${difficulty}&type=${questionsType}`;\n\n    fetch(API)\n      .then(respone => respone.json())\n      .then(data =>\n        setTimeout(() => {\n          const { response_code, results } = data;\n\n          if (response_code === 1) {\n            const message = (\n              <p>\n                The API doesn't have enough questions for your query. (Ex.\n                Asking for 50 Questions in a Category that only has 20.)\n                <br />\n                <br />\n                Please change the <strong>No. of Questions</strong>,{' '}\n                <strong>Difficulty Level</strong>, or{' '}\n                <strong>Type of Questions</strong>.\n              </p>\n            );\n\n            setProcessing(false);\n            setError({ message });\n\n            return;\n          }\n\n          results.forEach(element => {\n            element.options = shuffle([\n              element.correct_answer,\n              ...element.incorrect_answers,\n            ]);\n          });\n\n          setProcessing(false);\n          startQuiz(\n            results,\n            countdownTime.hours + countdownTime.minutes + countdownTime.seconds\n          );\n        }, 1000)\n      )\n      .catch(error =>\n        setTimeout(() => {\n          if (!navigator.onLine) {\n            setOffline(true);\n          } else {\n            setProcessing(false);\n            setError(error);\n          }\n        }, 1000)\n      );\n  };\n\n  if (offline) return <Offline />;\n\n  return (\n    <Container>\n      <Segment>\n        <Item.Group divided>\n          <Item>\n            <Item.Image src={mindImg} />\n            <Item.Content>\n              <Item.Header>\n                <h1>The Ultimate Trivia Quiz</h1>\n              </Item.Header>\n              {error && (\n                <Message error onDismiss={() => setError(null)}>\n                  <Message.Header>Error!</Message.Header>\n                  {error.message}\n                </Message>\n              )}\n              <Divider />\n              <Item.Meta>\n                <Dropdown\n                  fluid\n                  selection\n                  name=\"category\"\n                  placeholder=\"Select Quiz Category\"\n                  header=\"Select Quiz Category\"\n                  options={CATEGORIES}\n                  value={category}\n                  onChange={(e, { value }) => setCategory(value)}\n                  disabled={processing}\n                />\n                <br />\n                <Dropdown\n                  fluid\n                  selection\n                  name=\"numOfQ\"\n                  placeholder=\"Select No. of Questions\"\n                  header=\"Select No. of Questions\"\n                  options={NUM_OF_QUESTIONS}\n                  value={numOfQuestions}\n                  onChange={(e, { value }) => setNumOfQuestions(value)}\n                  disabled={processing}\n                />\n                <br />\n                <Dropdown\n                  fluid\n                  selection\n                  name=\"difficulty\"\n                  placeholder=\"Select Difficulty Level\"\n                  header=\"Select Difficulty Level\"\n                  options={DIFFICULTY}\n                  value={difficulty}\n                  onChange={(e, { value }) => setDifficulty(value)}\n                  disabled={processing}\n                />\n                <br />\n                <Dropdown\n                  fluid\n                  selection\n                  name=\"type\"\n                  placeholder=\"Select Questions Type\"\n                  header=\"Select Questions Type\"\n                  options={QUESTIONS_TYPE}\n                  value={questionsType}\n                  onChange={(e, { value }) => setQuestionsType(value)}\n                  disabled={processing}\n                />\n                <br />\n                <Dropdown\n                  search\n                  selection\n                  name=\"hours\"\n                  placeholder=\"Select Hours\"\n                  header=\"Select Hours\"\n                  options={COUNTDOWN_TIME.hours}\n                  value={countdownTime.hours}\n                  onChange={handleTimeChange}\n                  disabled={processing}\n                />\n                <Dropdown\n                  search\n                  selection\n                  name=\"minutes\"\n                  placeholder=\"Select Minutes\"\n                  header=\"Select Minutes\"\n                  options={COUNTDOWN_TIME.minutes}\n                  value={countdownTime.minutes}\n                  onChange={handleTimeChange}\n                  disabled={processing}\n                />\n                <Dropdown\n                  search\n                  selection\n                  name=\"seconds\"\n                  placeholder=\"Select Seconds\"\n                  header=\"Select Seconds\"\n                  options={COUNTDOWN_TIME.seconds}\n                  value={countdownTime.seconds}\n                  onChange={handleTimeChange}\n                  disabled={processing}\n                />\n              </Item.Meta>\n              <Divider />\n              <Item.Extra>\n                <Button\n                  primary\n                  size=\"big\"\n                  icon=\"play\"\n                  labelPosition=\"left\"\n                  content={processing ? 'Processing...' : 'Play Now'}\n                  onClick={fetchData}\n                  disabled={!allFieldsSelected || processing}\n                />\n              </Item.Extra>\n            </Item.Content>\n          </Item>\n        </Item.Group>\n      </Segment>\n      <br />\n    </Container>\n  );\n};\n\nMain.propTypes = {\n  startQuiz: PropTypes.func.isRequired,\n};\n\nexport default Main;\n"]},"metadata":{},"sourceType":"module"}